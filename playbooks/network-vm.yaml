---
# This playbook provisions complete GCP infrastructure including VPC, subnets, firewall, and VM
# Uses google.cloud collection from Ansible Galaxy (https://galaxy.ansible.com/google/cloud)
- name: Provision GCP infrastructure
  hosts: localhost  # Runs on the Ansible control node (not on remote hosts)
  connection: local # Executes modules locally (required for GCP API calls)
  gather_facts: true  # Disables fact gathering (not needed for cloud provisioning)

  tasks:
    # Creates a custom VPC network (module from google.cloud collection)
    - name: Create VPC network
      google.cloud.gcp_compute_network:  # Module documentation: https://docs.ansible.com/ansible/latest/collections/google/cloud/gcp_compute_network_module.html
        name: "ansible-network"          # Name of the VPC network
        auto_create_subnetworks: false   # Disables automatic subnet creation (we'll create custom subnets)
        project: "{ GCP_PROJECT_ID }"     # GCP project ID (passed as variable)
        auth_kind: "serviceaccount"      # Authentication method
        service_account_file: "{ GCP_SA_KEY }"  # Path to service account JSON key
        state: present                  # Ensures the VPC exists (creates if missing)

    # Creates first subnet in us-central1 region
    - name: Create us-central1 subnet
      google.cloud.gcp_compute_subnetwork:  # Module from google.cloud collection
        name: "ansible-subnet-usc1"        # Subnet name
        network: "ansible-network"         # Parent VPC network
        region: "us-central1"              # GCP region
        ip_cidr_range: "10.0.1.0/24"      # CIDR range for subnet
        project: "{ GCP_PROJECT_ID }"
        auth_kind: "serviceaccount"
        service_account_file: "{ GCP_SA_KEY }"
        state: present

    # Creates second subnet in us-east1 region for redundancy
    - name: Create us-east1 subnet
      google.cloud.gcp_compute_subnetwork:
        name: "ansible-subnet-use1"        # Different name for second subnet
        network: "ansible-network"         # Same VPC network
        region: "us-east1"                 # Different region for HA
        ip_cidr_range: "10.0.2.0/24"      # Different CIDR range
        project: "{ GCP_PROJECT_ID }"
        auth_kind: "serviceaccount"
        service_account_file: "{ GCP_SA_KEY }"
        state: present

    # Creates firewall rule to allow HTTP/HTTPS traffic
    - name: Create firewall rule
      google.cloud.gcp_compute_firewall:  # Module from google.cloud collection
        name: "allow-http"                # Descriptive firewall rule name
        network: "ansible-network"        # Applies to our VPC
        source_ranges: ["0.0.0.0/0"]      # Allow from any IP (restrict in production!)
        allowed:
          - protocol: "tcp"               # Allow TCP protocol
            ports: ["80", "443"]          # HTTP and HTTPS ports
        project: "{ GCP_PROJECT_ID }"
        auth_kind: "serviceaccount"
        service_account_file: "{ GCP_SA_KEY }"
        state: present

    # Creates a Compute Engine VM instance
    - name: Create VM instance
      google.cloud.gcp_compute_instance:  # Module from google.cloud collection
        name: "web-server"               # VM instance name
        machine_type: "n1-standard-1"    # GCP machine type
        disks:
          - auto_delete: true            # Delete disk when VM is deleted
            boot: true                   # This is the boot disk
            initialize_params:
              source_image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-2004-lts"  # Ubuntu 20.04 LTS image
        network_interfaces:
          - network: "global/networks/ansible-network"  # Attaches to our VPC
            subnetwork: "regions/us-central1/subnetworks/ansible-subnet-usc1"  # Specific subnet
            access_configs:
              - name: "External NAT"     # Configures public IP
                type: "ONE_TO_ONE_NAT"  # Enables Internet access
        zone: "us-central1-a"           # Zone must match subnet region
        project: "{ GCP_PROJECT_ID }"
        auth_kind: "serviceaccount"
        service_account_file: "{ GCP_SA_KEY }"
        state: present
    
    - name: Create GCS bucket
      google.cloud.gcp_storage_bucket:  # Module for GCS buckets
        name: "my-ansible-bucket"       # Globally unique bucket name
        project: "{ GCP_PROJECT_ID }"      # Project ID
        auth_kind: "serviceaccount"     # Auth method
        service_account_file: "{ GCP_SA_KEY }"  # Credentials
        state: present                 # Ensures bucket exists